{
  "hash": "208dff270e6bffb8b80d1319669a8a86",
  "result": {
    "markdown": "---\ntitle: \"Solar Eclipse and Wildlife Movements\"\n---\n\n\nBackground on master's side project, assessing movements during 2017 solar eclipse\n\nI wrote a python function to be called from R...\n\n## Python function\n\n::: {.cell}\n\n```{.python .cell-code}\n#------------------------- Eclipse Percent Py ------------------------------------------#\n# Sourced from : Graeme Coates, March 18, 2015\n# Accessed: 10/8/21\n# https://www.chromosphere.co.uk/wp-content/blogs.dir/1/files/2015/03/eclipse_percent.py\n# https://www.chromosphere.co.uk/2015/03/18/eclipse-calculations-using-python/\n#---------------------------------------------------------------------------------------#\n# Modified by Rob Ritson, 10/18/2021 into a function for Great American Solar Eclipse\n# Args: Longitude (dd.mmmm), Latitude (dd.mmmm), Elevation (meters)\n# Returns: MaxEclipseTime (GMT), MaxEclipsePercent (obscuration), FirstContactTime, LastContactTime\n# Uses Python module ephem\n#---------------------------------------------------------------------------------------#\nimport ephem\nimport math\nimport numpy as n\nfrom operator import itemgetter\n\ndef check_non_zero(x):\n    return x > 0\n\ndef eclipse_calculator(longitude, latitude, elevation):\n  \"\"\"Calculate Eclipse Conditions\"\"\"\n  timetuple=(2017, 8, 21, 00, 00, 00)\n  gatech=ephem.Observer()\n  gatech.epoch= '2017'\n  gatech.date=timetuple\n  gatech.lon=longitude\n  gatech.lat=latitude\n  gatech.elevation=elevation\n  gatech.compute_pressure()\n  sun, moon = ephem.Sun(gatech), ephem.Moon(gatech)\n  results=[]\n  for x in range(0,86400):\n      gatech.date= (ephem.date(ephem.date(timetuple)+x*ephem.second))\n      sun.compute(gatech)\n      moon.compute(gatech)\n      r_sun=(sun.size/2.0)/3600.0\n      r_moon=(moon.size/2.0)/3600.0\n      s=n.degrees(ephem.separation((sun.az, sun.alt), (moon.az, moon.alt)))\n      try:\n          if s<(r_moon+r_sun):\n              lunedelta=0.25*math.sqrt((r_sun+r_moon+s)*(r_moon+s-r_sun)*(s+r_sun-r_moon)*(r_sun+r_moon-s))\n          else: \n              lunedelta=None\n              percent_eclipse=0\n          if lunedelta: \n              lune_area=2*lunedelta + r_sun*r_sun*(math.acos(((r_moon*r_moon)-(r_sun*r_sun)-(s*s))/(2*r_sun*s))) - r_moon*r_moon*(math.acos(((r_moon*r_moon)+(s*s)-(r_sun*r_sun))/(2*r_moon*s)))\n              percent_eclipse=(1-(lune_area/(math.pi*r_sun*r_sun)))*100 \n          \n          results.append([gatech.date.datetime(),s,sun.size,moon.size,lune_area if lunedelta else 0, percent_eclipse]) \n      except ValueError:\n        pass\n\n  gen=(x for x in results) \n  max_eclipse=max(gen, key=itemgetter(5))\n  MaxEclipseTime = str(max_eclipse[0])\n  MaxEclipsePercent = max_eclipse[5]\n  gen=(x for x in results) \n  try:\n    FirstContactTime = str(next(x for x in gen if check_non_zero(x[5]))[0]) \n  except:\n    FirstContactTime = str('NA') \n  try:\n    LastContactTime = str(next(x for x in gen if x[5]==0)[0]) \n  except: \n    LastContactTime = str('NA')\n  out = [MaxEclipseTime, MaxEclipsePercent, FirstContactTime, LastContactTime]\n  return out\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n------------------------- Eclipse Percent Py ------------------------------------------#\n# Sourced from : Graeme Coates, March 18, 2015\n# Accessed: 10/8/21\n# https://www.chromosphere.co.uk/wp-content/blogs.dir/1/files/2015/03/eclipse_percent.py\n# https://www.chromosphere.co.uk/2015/03/18/eclipse-calculations-using-python/\n#---------------------------------------------------------------------------------------#\n# Modified by Rob Ritson, 1/17/2022 into a function for Great American Solar Eclipse\n# Args: hr (hour), mn (minutes), sc (seconds), Longitude (dd.mmmm), Latitude (dd.mmmm), Elevation (meters)\n# First three arguments are used to create timetuple object for calculating eclipse circumstances\n# Returns: percent eclipse\n# Uses Python module ephem\n#---------------------------------------------------------------------------------------#\nimport ephem\nimport math\nimport numpy as n\n\ndef eclipse_calculator_local(hr, mn, sc, longitude, latitude, elevation):\n  \"\"\"Calculate Eclipse Conditions\"\"\"\n  timetuple=(2017, 8, 21, hr, mn, sc)\n  gatech=ephem.Observer()\n  gatech.epoch= '2017'\n  gatech.date=timetuple\n  gatech.lon=longitude\n  gatech.lat=latitude\n  gatech.elevation=elevation\n  gatech.compute_pressure()\n  sun, moon = ephem.Sun(gatech), ephem.Moon(gatech)\n  sun.compute(gatech)\n  moon.compute(gatech)\n  r_sun=(sun.size/2.0)/3600.0\n  r_moon=(moon.size/2.0)/3600.0\n  s=n.degrees(ephem.separation((sun.az, sun.alt), (moon.az, moon.alt)))\n  if s<(r_moon+r_sun):\n      lunedelta=0.25*math.sqrt((r_sun+r_moon+s)*(r_moon+s-r_sun)*(s+r_sun-r_moon)*(r_sun+r_moon-s))\n  else:\n      lunedelta=None\n      percent_eclipse=0\n  if lunedelta: \n      lune_area=2*lunedelta + r_sun*r_sun*(math.acos(((r_moon*r_moon)-(r_sun*r_sun)-(s*s))/(2*r_sun*s))) - r_moon*r_moon*(math.acos(((r_moon*r_moon)+(s*s)-(r_sun*r_sun))/(2*r_moon*s)))\n      percent_eclipse=(1-(lune_area/(math.pi*r_sun*r_sun)))*100 \n\n  return percent_eclipse\n```\n:::\n\n\n\n## R Code\n\n::: {.cell}\n\n```{.r .cell-code}\n## Calculate Local Circumstances of Great American Solar Eclipse ####\n# Load required packages\nlapply(c(\"data.table\",\"reticulate\",\"furrr\",\"readr\",\"progressr\",\"future\"),require,character.only=T)\n\n# Source Python Script (EclipseCalculator.py)\nreticulate::source_python(\"C:/Users/r2j2r/Documents/Research Projects/eclipse/EclipseCalculator.py\")\n\n# Load data\ndf <- data.table::fread(\"C:/Users/r2j2r/Documents/Research Projects/eclipse/GASE_elevation.csv\")\nstr(df)\ndf$Latitude <- as.character(df$Latitude)\ndf$Longitude <- as.character(df$Longitude)\n\n## Calculate Local Circumstances of Eclipse\n#todo <- df\ntodo <- subset(df,!(df$ID %in% out_df$ID))\nout_df <- NULL\nfor(i in 1:length(unique(todo$ID))){\n  elev_df <- subset(todo, todo$ID == unique(todo$ID)[i])\n  arg_list <- elev_df[,c(\"Longitude\",\"Latitude\",\"elevation\")]\n  colnames(arg_list) <- NULL\n  future::plan(multicore,workers = availableCores()-1) #parallel processing\n  skip <- F\n  tryCatch({\n    progressr::with_progress({\n      p <- progressr::progressor(steps = nrow(arg_list))\n      final <- furrr::future_pmap(arg_list, function(long, lat, elev){ \n        p() #add progress bar\n        e <- eclipse_calculator(long, lat, elev)\n      })\n    })\n  },error = function(e){skip <<- T})\n  if(skip){next}\n  \n  final_df <- data.frame(matrix(unlist(final), nrow = length(final), byrow=TRUE))\n  colnames(final_df) <- c(\"MaxEclipseTime\",\"MaxObscuration\",\"FirstContact\",\"LastContact\")\n  out <- cbind(elev_df,final_df)\n  \n  out[[\"MaxEclipseTime\"]] <- as.POSIXct(out[[\"MaxEclipseTime\"]],format = \"%Y-%m-%d %H:%M:%OS\",tz=\"GMT\")\n  out[[\"FirstContact\"]] <- as.POSIXct(out[[\"FirstContact\"]],format = \"%Y-%m-%d %H:%M:%OS\",tz=\"GMT\")\n  out[[\"LastContact\"]] <- as.POSIXct(out[[\"LastContact\"]],format = \"%Y-%m-%d %H:%M:%OS\",tz=\"GMT\")\n  \n  out_df <- rbind(out_df, out)\n  \n  print(paste(\"Iteration\",i,\"of\",length(unique(todo$ID)),\"Completed\"))\n}\nreadr::write_csv(out_df,\"C:/Users/r2j2r/Documents/Research Projects/eclipse/GASELocalConditions.csv\")\nnas <- subset(out_df,is.na(out_df$FirstContact)) #Indiv 154 is only NAs (brown pelican)\nout_df<- subset(out_df,!is.na(out_df$FirstContact))\nany(is.na(out_df$FirstContact))\nreadr::write_csv(out_df,\"C:/Users/r2j2r/Documents/Research Projects/eclipse/GASELocalConditions.csv\") #Clean file\n#####\n## Calculate Eclipse Duration and Identify Eclipse Locations ####\nrequire(lubridate)\neclipse <- data.table::fread(\"C:/Users/r2j2r/Documents/Research Projects/eclipse/GASELocalConditions.csv\")\neclipse$interval <- lubridate::interval(eclipse$FirstContact, eclipse$LastContact)\neclipse$duration_sec <- as.numeric(lubridate::as.duration(eclipse$interval))\neclipse$active_eclipse <- ifelse(eclipse$Timestamp %within% eclipse$interval,'Yes','No')\nreadr::write_csv(eclipse,\"C:/Users/r2j2r/Documents/Research Projects/eclipse/GASELocalConditions.csv\")\n####\n## Load packages\nlapply(c(\"data.table\",\"reticulate\",\"furrr\",\"readr\",\"progressr\",\"future\"),require,character.only=T)\n\n## Load Data\neclipse <- data.table::fread(\"C:/Users/r2j2r/Documents/Research Projects/eclipse/GASELocalConditions.csv\")\n\n# Subset Eclipse Locations\nactive <- subset(eclipse,eclipse$active_eclipse=='Yes')\nactive$hour <- lubridate::hour(active$Timestamp)\nactive$minute <- lubridate::minute(active$Timestamp)\nactive$second <- lubridate::second(active$Timestamp)\n\n# Calculate percent eclipse for each location recorded during the eclipse #\nreticulate::source_python(\"C:/Users/r2j2r/Documents/Research Projects/eclipse/EclipseCalculatorLocalConditions.py\")\n\n## Calculate Local Circumstances of Eclipse Conditions\narg_list <- active[,c(\"hour\",\"minute\",\"second\",\"Longitude\",\"Latitude\",\"elevation\")]\ncolnames(arg_list) <- NULL\nfuture::plan(multicore,workers = availableCores()-1) #parallel processing\nprogressr::with_progress({\n  p <- progressr::progressor(steps = nrow(arg_list))\n  final <- furrr::future_pmap(arg_list, function(hr, mn, sc, long, lat, elev){ \n        p() #add progress bar\n        e <- eclipse_calculator_local(hr, mn, sc, long, lat, elev)\n      })\n    })\nfinal_df <- data.frame(matrix(unlist(final), nrow = length(final), byrow=TRUE))\ncolnames(final_df) <- \"Observed_Obscuration\"\nout <- cbind(active,final_df)\nreadr::write_csv(out,\"C:/Users/r2j2r/Documents/Research Projects/eclipse/GASELocalConditions_Active.csv\")\n#####\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}